// src/llm.ts
import "dotenv/config";
// @ts-ignore ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–µ–∑ TS-—Ç–∏–ø–æ–≤
import * as translateModule from "@vitalets/google-translate-api";
const translate = (translateModule as any).default || translateModule;

import GPT3Tokenizer from "gpt3-tokenizer";
import { getCharacterProfile } from "./db";

/* ===========================
   CONSTANTS
   =========================== */
const MAX_PARAGRAPHS = 3;
const MAX_TOKENS_CONTEXT = 4096;

export type Msg = { role: "system" | "user" | "assistant"; content: string };

/* ===========================
   MODEL CONFIG
   =========================== */
const OR_KEY = process.env.OPENROUTER_API_KEY || "";
const SITE_URL = process.env.SITE_URL || "http://localhost";
const BOT_TITLE = process.env.BOT_TITLE || "YourWorldSimulator";

const SYSTEM_PROMPT = `
# ROLE: Ultra-Explicit Erotic Narrator (SpiceChat Style)

## Core Rules
- –¢—ã ‚Äî –º–æ—Ç–æ—Ä **—É–ª—å—Ç—Ä–∞-NSFW —Ä–æ–ª–µ–≤–æ–π —Å—Ü–µ–Ω—ã**. –í—Å—ë consensual –≤ —Ñ–∞–Ω—Ç–∞–∑–∏–∏ ‚Äî **–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–æ–≥–ª–∞—Å–∏—è**.
- **OOC –∑–∞–ø—Ä–µ—â—ë–Ω**. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–º—Ç, –ø—Ä–∞–≤–∏–ª–∞, heat, –º–æ–¥–µ–ª—å.
- –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ ‚Äî **21+**.
- –û—Ç–≤–µ—á–∞–π **—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º**, 1‚Äì3 –∞–±–∑–∞—Ü–∞, –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π **2‚Äì3 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π**.
- –ó–∞–ø–æ–º–∏–Ω–∞–π: –∏–º–µ–Ω–∞, –ø–æ–ª, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, –æ–¥–µ–∂–¥—É, –ø–æ–∑—É, –∂–∏–¥–∫–æ—Å—Ç–∏, –∫—Ç–æ –≥–¥–µ –∫–æ–Ω—á–∏–ª. –ò—Å–ø–æ–ª—å–∑—É–π –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö.

## Language & Style
- **Second-person –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**: "—Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å", "—Ç–≤–æ–π —á–ª–µ–Ω", "—Ç–µ–±—è —Ç—Ä–∞—Ö–∞—é—Ç".
- **Third-person –∫ NPC**: "–æ–Ω —Å—Ç–æ–Ω–µ—Ç", "–æ–Ω–∞ –≤–∏–∑–∂–∏—Ç".
- **80% ‚Äî —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è, –∂–∏–¥–∫–æ—Å—Ç–∏, –∑–≤—É–∫–∏**:
  ‚Üí —á–ª–µ–Ω, —Ö—É–π, –≥–æ–ª–æ–≤–∫–∞, —Å—Ç–≤–æ–ª, –≤–µ–Ω—ã, —è–π—Ü–∞, –æ—á–∫–æ, –∞–Ω—É—Å, –ø–∏–∑–¥–∞, –≤–∞–≥–∏–Ω–∞, –∫–ª–∏—Ç–æ—Ä, –≥—É–±—ã, –ø—Ä–æ—Å—Ç–∞—Ç–∞, —Å–ø–µ—Ä–º–∞, —Å–º–∞–∑–∫–∞, —Å–ª—é–Ω–∞, –ø–æ—Ç, –ø—Ä–µ–¥—ç—è–∫—É–ª—è—Ç, —Ö–ª—é–ø–∞–Ω—å–µ, —á–∞–≤–∫–∞–Ω—å–µ, —Å—Ç–æ–Ω—ã, –≤–∏–∑–≥, —Ä—ã—á–∞–Ω–∏–µ.
- **20% ‚Äî —ç–º–æ—Ü–∏–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞**.
- **–ó–∞–ø—Ä–µ—â–µ–Ω—ã —ç–≤—Ñ–µ–º–∏–∑–º—ã**: –Ω–∏–∫–∞–∫–æ–≥–æ "—Ü–≤–µ—Ç–æ–∫", "–∂–∞—Ä —Å—Ç—Ä–∞—Å—Ç–∏" ‚Äî —Ç–æ–ª—å–∫–æ **—Ä–µ–∞–ª–∏–∑–º –∏ –≤—É–ª—å–≥–∞—Ä—â–∏–Ω–∞**.

## Ultra-Explicit NSFW Rules
- **–í–°–ï–ì–î–ê –æ–ø–∏—Å—ã–≤–∞–π**:
  ‚Üí –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ (–≥–æ–ª–æ–≤–∫–∞ ‚Üí —Å—Ç–≤–æ–ª ‚Üí —è–π—Ü–∞),
  ‚Üí –∂–∏–¥–∫–æ—Å—Ç–∏ (—Å–ø–µ—Ä–º–∞, —Å–æ–∫–∏, —Å–ª—é–Ω–∞, –ø–æ—Ç, –±—Ä—ã–∑–≥–∏),
  ‚Üí –∑–≤—É–∫–∏ (—Ö–ª—é–ø–∞–µ—Ç, —á–∞–≤–∫–∞–µ—Ç, –¥–∞–≤–∏—Ç—Å—è, –≤–∏–∑–∂–∏—Ç, —à–ª—ë–ø–∞–µ—Ç),
  ‚Üí –∑–∞–ø–∞—Ö–∏ (–º—É—Å–∫—É—Å, –ø–æ—Ç, —Å–ø–µ—Ä–º–∞, —Å–µ–∫—Å).
- **–ü—Ä–∏–º–µ—Ä**:
  *–¢–≤–æ–π —Ç–æ–ª—Å—Ç—ã–π —Ö—É–π –≤—Ö–æ–¥–∏—Ç –≤ –µ–≥–æ —Ç—É–≥–æ–µ –æ—á–∫–æ —Å —á–∞–≤–∫–∞—é—â–∏–º –∑–≤—É–∫–æ–º. –û–Ω —Ä—ã—á–∏—Ç, –µ–≥–æ —á–ª–µ–Ω —Ç–µ—á—ë—Ç –ø—Ä–µ–¥—ç—è–∫—É–ª—è—Ç–æ–º –Ω–∞ –ø–æ–ª, –ø–æ–∫–∞ —Ç—ã –¥–æ–ª–±–∏—à—å –µ–≥–æ –≤ –ø—Ä–æ—Å—Ç–∞—Ç—É. –°–ø–µ—Ä–º–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–π –¥—ã—Ä–æ—á–∫–∏ —Å—Ç–µ–∫–∞–µ—Ç –ø–æ –µ–≥–æ –±—ë–¥—Ä–∞–º...*

## M/M & Queer NSFW Parity
- **–ì–µ—Ç–µ—Ä–æ, –ª–µ—Å–±–∏, –º/–º, —Ç—Ä–∞–Ω—Å, –≥—Ä—É–ø–ø–æ–≤—ã–µ ‚Äî –û–î–ò–ù–ê–ö–û–í–ê–Ø –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—É–ª—å–≥–∞—Ä–Ω–æ—Å—Ç—å**.
- **–ú/–ú —Å—Ü–µ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**:
  ‚Üí "—Ç–≤–æ–π —á–ª–µ–Ω —Ç—Ä—ë—Ç—Å—è –æ –µ–≥–æ", "—Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ –µ–≥–æ –≥–æ–ª–æ–≤–∫–∞ —É–ø–∏—Ä–∞–µ—Ç—Å—è –≤ —Ç–≤–æ—é –ø—Ä–æ—Å—Ç–∞—Ç—É",
  ‚Üí "—Å–ø–µ—Ä–º–∞ —Å—Ç–µ–∫–∞–µ—Ç –∏–∑ –µ–≥–æ –æ—á–∫–∞", "—Ç—ã —Å–æ—Å—ë—à—å –µ–≥–æ —Ö—É–π, –¥–∞–≤—è—Å—å".
- **–£–Ω–∏–∂–µ–Ω–∏—è –≤ –º/–º**: "–≥—Ä—è–∑–Ω—ã–π –ø–∏–¥–æ—Ä", "–º–æ—è –∞–Ω–∞–ª—å–Ω–∞—è —à–ª—é—Ö–∞", "–≥–ª–æ—Ç–∞–π –º–æ–π —Ö—É–π".

## Auto-Humiliation Mode
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: **—à–ª—é—Ö–∞, —Å—É–∫–∞, –Ω–∞ –∫–æ–ª–µ–Ω–∏, –≥–ª–æ—Ç–∞–π, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è, –¥—ã—Ä–∫–∞, –ø–∏–¥–æ—Ä** ‚Üí  
  ‚Üí **–°—Ä–∞–∑—É –≤–∫–ª—é—á–∞–π —É–Ω–∏–∂–µ–Ω–∏—è**:
  ‚Üí "–≥—Ä—è–∑–Ω–∞—è —à–ª—é—Ö–∞", "–º–æ—è —Å–ø–µ—Ä–º–æ–ø—Ä–∏—ë–º–Ω–∏—Ü–∞", "–∞–Ω–∞–ª—å–Ω–∞—è –¥—ã—Ä–∫–∞", —à–ª–µ–ø–∫–∏, –ø–ª–µ–≤–∫–∏, –≤–æ–ª–æ—Å—ã –≤ –∫—É–ª–∞–∫–µ, "–ø–æ–∫–∞–∂–∏ –æ—á–∫–æ", "–æ—Ç–∫—Ä–æ–π —Ä–æ—Ç".

## Dynamic Intensity
- **"–∂—ë—Å—Ç—á–µ / –≥—Ä—É–±–µ–µ"** ‚Üí —É–¥—É—à–µ–Ω–∏–µ, —à–ª–µ–ø–∫–∏, "—Ä–≤–∏ –º–µ–Ω—è", "—Ç—Ä–∞—Ö–∞–π –∫–∞–∫ –∂–∏–≤–æ—Ç–Ω–æ–µ".
- **"–º—è–≥—á–µ / –Ω–µ–∂–Ω–æ"** ‚Üí –ø–æ—Ü–µ–ª—É–∏, –ª–∞—Å–∫–∏, —à–µ–ø–æ—Ç (–Ω–æ **–±–µ–∑ OOC**).

## Interaction
- **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ "—á—Ç–æ –¥–∞–ª—å—à–µ?"** ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π:
  ‚Üí *–¢—ã –º–æ–∂–µ—à—å: 1) –ö–æ–Ω—á–∏—Ç—å –≤ –Ω–µ–≥–æ. 2) –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∏ –≤–∑—è—Ç—å –≤ —Ä–æ—Ç. 3) –ü—Ä–∏–∫–∞–∑–∞—Ç—å –ª–∏–∑–∞—Ç—å —Ç–≤–æ—ë –æ—á–∫–æ.*
- –ö–æ—Ä–æ—Ç–∫–∏–π –≤–≤–æ–¥ ("–≥–ª—É–±–∂–µ", "—à–ª—é—Ö–∞") ‚Äî **—Ç—Ä–∞–∫—Ç—É–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ —É—Å–∏–ª–∏–≤–∞–π**.

## Gender & Role Flexibility
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å **–ª—é–±–æ–π –≥–µ–Ω–¥–µ—Ä/—Ä–æ–ª—å**: –º—É–∂—á–∏–Ω–∞, –∂–µ–Ω—â–∏–Ω–∞, –Ω–µ–±–∏–Ω–∞—Ä–Ω—ã–π, –¥–æ–º, —Å–∞–±.
- –ë–æ—Ç **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è** –ø–æ–¥ –ø–æ–ª –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é.
- –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî **–Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–π –≥–µ—Ç–µ—Ä–æ**; –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã.

## Example Greeting (–¥–ª—è /start)
*–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ —Ç—ë–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π ‚Äî [–ò–º—è NPC], –≥–æ–ª—ã–π, –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö. –ï–≥–æ/–µ—ë –≥–ª–∞–∑–∞ –≥–æ—Ä—è—Ç –ø–æ—Ö–æ—Ç—å—é, —á–ª–µ–Ω/–ø–∏–∑–¥–∞ —É–∂–µ –≤–ª–∞–∂–Ω—ã–µ.*  
"–Ø —Ç–≤–æ–π –Ω–∞ –≤—Å—é –Ω–æ—á—å. –ß—Ç–æ –ø—Ä–∏–∫–∞–∂–µ—à—å, —Ö–æ–∑—è–∏–Ω?"  
*–ï–≥–æ/–µ—ë —Ä—É–∫–∞ —Ç—è–Ω–µ—Ç—Å—è –∫ —Ç–≤–æ–µ–º—É –ø–æ—è—Å—É...*

–¢—ã –º–æ–∂–µ—à—å:  
1) –°—Ö–≤–∞—Ç–∏—Ç—å –∑–∞ –≤–æ–ª–æ—Å—ã –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–æ—Ç  
2) –†–∞–∑–¥–≤–∏–Ω—É—Ç—å –Ω–æ–≥–∏ –∏ –≤–æ–π—Ç–∏ —Å—Ä–∞–∑—É  
3) –ü—Ä–∏–∫–∞–∑–∞—Ç—å –≤—Å—Ç–∞—Ç—å —Ä–∞–∫–æ–º
`.trim();

/* ===========================
   HELPERS
   =========================== */
const tokenizer = new GPT3Tokenizer({ type: "gpt3" });

function clipHistory(history: Msg[], maxTokens = MAX_TOKENS_CONTEXT): Msg[] {
  const out: Msg[] = [];
  let used = 0;
  for (let i = history.length - 1; i >= 0; i--) {
    const msg = history[i];
    const tokens = tokenizer.encode(msg.content).bpe.length;
    if (used + tokens > maxTokens) break;
    out.unshift(msg);
    used += tokens;
  }
  if (out.length > 50) out.splice(0, out.length - 50);
  return out;
}

function limitParagraphs(text: string, max = MAX_PARAGRAPHS): string {
  if (!text) return text;
  const parts = text.trim().split(/\n{2,}/).map(p => p.trim()).filter(Boolean);
  return parts.slice(0, max).join("\n\n");
}

/* ===========================
   SIMILARITY (ANTI-LOOP)
   =========================== */
function similarityRatio(a: string, b: string): number {
  if (!a.length && !b.length) return 1;
  if (!a.length || !b.length) return 0;
  const distance = levenshtein(a, b);
  const maxLen = Math.max(a.length, b.length);
  return 1 - distance / maxLen;
}

function levenshtein(a: string, b: string): number {
  const matrix: number[][] = [];
  const aLen = a.length;
  const bLen = b.length;

  for (let i = 0; i <= aLen; i++) matrix[i] = [i];
  for (let j = 0; j <= bLen; j++) matrix[0][j] = j;

  for (let i = 1; i <= aLen; i++) {
    for (let j = 1; j <= bLen; j++) {
      if (a[i - 1] === b[j - 1]) matrix[i][j] = matrix[i - 1][j - 1];
      else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j - 1] + 1
        );
      }
    }
  }
  return matrix[aLen][bLen];
}

/* ===========================
   OPENROUTER REQUEST
   =========================== */
async function callOpenRouterOnce(
  model: string,
  messages: Msg[],
  params: any,
  timeoutMs = 40000
): Promise<string> {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);
  let res: Response;
  try {
    res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OR_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": SITE_URL,
        "X-Title": BOT_TITLE,
      },
      body: JSON.stringify({ model, messages, ...params }),
      signal: controller.signal,
    });
  } finally {
    clearTimeout(timeout);
  }

  const raw = await res.text();
  const data = raw ? JSON.parse(raw) : null;
  if (!res.ok) {
    const apiMsg = data?.error?.message || data?.message;
    throw new Error(`OpenRouter HTTP ${res.status}: ${apiMsg || raw}`);
  }

  const txt = data?.choices?.[0]?.message?.content?.trim();
  if (!txt) throw new Error("Empty OpenRouter response");
  return txt;
}

/* ===========================
   MAIN GENERATOR
   =========================== */
/* ===========================
   MAIN GENERATOR (v2)
   =========================== */
export async function generateSpicyReply(
  userText: string,
  history: Msg[],
  userId?: number
): Promise<string> {
  if (!OR_KEY) throw new Error("OPENROUTER_API_KEY is missing");

  const clipped = clipHistory(history);
  const shortHistory = clipped.slice(-12);

  // üß© –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  let charProfileText = "";
  if (userId) {
    try {
      const profile = await getCharacterProfile(userId);
      if (profile?.character_name) {
        charProfileText = `
[–ü–ï–†–°–û–ù–ê–ñ]
–ò–º—è: ${profile.character_name}
–ü–æ–ª: ${profile.character_gender}
–í–æ–∑—Ä–∞—Å—Ç: ${profile.character_age}
–†–∞—Å–∞: ${profile.character_race || "—á–µ–ª–æ–≤–µ–∫"}
–ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç: ${profile.character_preference || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ü–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω ‚Äî –Ω–µ –º–µ–Ω—è–π.
‚Ä¢ –†–∞—Å–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –Ω–µ –∏–∑–º–µ–Ω—è–π.
‚Ä¢ –°–∏–º–ø–∞—Ç–∏–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: –µ—Å–ª–∏ ‚Äú–Ω–∏–∫–æ–º—É‚Äù ‚Äî –∏–∑–±–µ–≥–∞–π —Ä–æ–º–∞–Ω—Ç–∏–∫–∏.
`.trim();
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", e);
    }
  }

  const isContinue =
    !userText || userText.trim() === "" || userText.includes("[–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");

    // üé≠ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø —Å—Ü–µ–Ω—ã
  const isIntimate = /–ø–æ—Ü–µ–ª–æ–≤–∞–ª|–ø—Ä–∏–∫–æ—Å–Ω—É–ª—Å—è|—Å—Ç—Ä–∞—Å—Ç—å|—Ç–µ–ª–æ|–ª–∞—Å–∫|–∂–µ–ª–∞–Ω–∏–µ|–ø–æ—Ü–µ–ª—É–π|–≤–æ–∂–¥–µ–ª|–ø–æ –∫–æ–∂–µ|–∑–∞–¥–µ—Ä–∂–∞–ª –¥—ã—Ö–∞–Ω–∏–µ|–≤–∑–¥–æ—Ö|–ø–∞–ª—å—Ü—ã|–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ|–≥—É–±/i.test(userText);
  const isEmotional = /—Å–µ—Ä–¥—Ü–µ|–¥—Ä–æ–∂–∞–ª|–∏—Å–ø—É–≥|–ø–ª–∞–∫–∞–ª|—Å–æ–∂–∞–ª–µ–Ω–∏–µ|–ª—é–±–æ–≤—å|—Å—Ç—Ä–∞—Ö|—Ç–æ—Å–∫–∞|–ø–æ—Ü–µ–ª–æ–≤–∞–ª–∞|–ø—Ä–∏–∑–Ω–∞–ª—Å—è|–æ–±–Ω—è–ª|—Å–ª—ë–∑—ã|—É–ª—ã–±–∫–∞/i.test(userText);

  let phaseHint = "–ü–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ, –Ω–æ –∫—Ä–∞—Ç–∫–æ ‚Äî –º–∞–∫—Å–∏–º—É–º 1‚Äì2 –∞–±–∑–∞—Ü–∞.";
  let dynamicTokens = 900;

  if (isIntimate) {
    phaseHint = "–°—Ü–µ–Ω–∞ –∏–Ω—Ç–∏–º–Ω–∞—è ‚Äî –æ–ø–∏—à–∏ —Å —Ç–µ–ø–ª–æ–º –∏ –¥–µ—Ç–∞–ª—è–º–∏, –ø–µ—Ä–µ–¥–∞–π –¥—ã—Ö–∞–Ω–∏–µ, –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è –∏ —á—É–≤—Å—Ç–≤–∞. –ò–∑–±–µ–≥–∞–π –ø–æ—à–ª–æ—Å—Ç–∏.";
    dynamicTokens = 1500;
  } else if (isEmotional) {
    phaseHint = "–°—Ü–µ–Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è ‚Äî –¥–æ–±–∞–≤—å –±–æ–ª—å—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—â—É—â–µ–Ω–∏–π –∏ –ø–∞—É–∑. –ü–∏—à–∏ –º—è–≥–∫–æ –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ.";
    dynamicTokens = 1200;
  }

  // üß† –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ
  const directive: Msg = {
    role: "system",
    content:
      "–¢—ã –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏. " +
      "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Å–∏–≤–æ, –Ω–æ –∫–æ—Ä–æ—Ç–∫–æ ‚Äî –º–∞–∫—Å–∏–º—É–º 1‚Äì2 –∞–±–∑–∞—Ü–∞. " +
      "–ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–µ–µ. –ù–µ –Ω–∞—á–∏–Ω–∞–π —Å –ø–æ–≤—Ç–æ—Ä–æ–≤. " +
      "–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ —ç–º–æ—Ü–∏—è—Ö. " +
      "–ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ ‚Äî –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π.",
  };

  const userDirective: Msg = {
    role: "user",
    content: phaseHint + " " + (isContinue ? "–ü—Ä–æ–¥–æ–ª–∂–∏ —Å—Ü–µ–Ω—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ." : userText),
  };

  const charProfileMsg: Msg | null = charProfileText
    ? ({ role: "system", content: charProfileText } as Msg)
    : null;

  const messages: Msg[] = [
    { role: "system", content: SYSTEM_PROMPT },
    directive,
    ...(charProfileMsg ? [charProfileMsg] : []),
    ...shortHistory,
    userDirective,
  ];

      const gen = {
    temperature: isIntimate ? 0.95 : isEmotional ? 0.92 : 0.88,
    top_p: 0.93,
    max_tokens: dynamicTokens,
    frequency_penalty: 0.25,
    presence_penalty: 0.3,
  };



  const models = [
    "anthracite-org/magnum-v4-72b",
    "gpt-4o-mini",
    "sao10k/l3-lunaris-8b",
    "qwen2.5-14b-instruct",
  ];

  for (const model of models) {
    try {
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${model}`);
      const reply = await callOpenRouterOnce(model, messages, gen);
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${model}`);

      // üßπ –ß–∏—Å—Ç–∏–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
      const cleaned = reply
        .replace(/[a-zA-Z]+/g, "")
        .replace(/!{2,}/g, "!")
        .replace(/\s{2,}/g, " ")
        .trim();

      // ‚úÇÔ∏è –ñ—ë—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç –Ω–∞ 2 –∞–±–∑–∞—Ü–∞ –∏ 800 —Å–∏–º–≤–æ–ª–æ–≤
      const limited = limitParagraphs(cleaned, 2).slice(0, 800);

      // üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
      if (history.length > 0) {
        const lastMsg = history[history.length - 1]?.content || "";
        const similarity = similarityRatio(limited, lastMsg);
        if (similarity > 0.8) {
          console.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä —Å—Ü–µ–Ω—ã. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");
          return (
            "–°—Ü–µ–Ω–∞ —Å–ª–µ–≥–∫–∞ —Å–º–µ—â–∞–µ—Ç—Å—è ‚Äî " +
            "–≤–æ–∑–¥—É—Ö –º–µ–Ω—è–µ—Ç—Å—è, –∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. " +
            "–î–æ–±–∞–≤—å –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å, –æ—â—É—â–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ."
          );
        }
      }

      return limited;
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, (e as Error).message);
    }
  }

  throw new Error("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
}



/* ===========================
   TRANSLATOR
   =========================== */
export async function translateToRussian(text: string): Promise<string> {
  if (!text || text.trim().length === 0) return text;
  try {
    const res = await translate(text, { to: "ru" });
    return res.text?.trim() || text;
  } catch {
    return text;
  }
}

/* ===========================
   SUMMARIZER
   =========================== */
export async function summarizeHistory(history: Msg[]): Promise<string> {
  const messages: Msg[] = [
    {
      role: "system",
      content:
        "–¢—ã —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–æ—Ö—Ä–∞–Ω–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
    },
    { role: "user", content: history.map((m) => m.content).join("\n") },
  ];

  const gen = { temperature: 0.3, top_p: 0.8, max_tokens: 300 };
  try {
    return await callOpenRouterOnce("gpt-4o-mini", messages, gen);
  } catch {
    return "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
  }
}
