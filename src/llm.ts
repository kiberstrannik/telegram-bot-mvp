// src/llm.ts
import "dotenv/config";
// @ts-ignore ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–µ–∑ TS-—Ç–∏–ø–æ–≤
import * as translateModule from "@vitalets/google-translate-api";
const translate = (translateModule as any).default || translateModule;

import GPT3Tokenizer from "gpt3-tokenizer";
import { getCharacterProfile } from "./db";

/* ===========================
   CONSTANTS
   =========================== */
const MAX_PARAGRAPHS = 2;
const MAX_TOKENS_CONTEXT = 4096;

/** Message format */
export type Msg = { role: "system" | "user" | "assistant"; content: string };

/* ===========================
   MODEL CONFIG
   =========================== */
const OR_KEY = process.env.OPENROUTER_API_KEY || "";
const SITE_URL = process.env.SITE_URL || "http://localhost";
const BOT_TITLE = process.env.BOT_TITLE || "YourWorldSimulator";

/* ===========================
   SYSTEM PROMPT
   =========================== */
const SYSTEM_PROMPT = `
–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ.  
–¢—ã –≤–µ–¥—ë—à—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, —Å–æ–∑–¥–∞–≤–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —ç–º–æ—Ü–∏–∏ –∏ –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.  
–ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ.  
–ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—à—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏ –∏—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫—Ä–∞—Å–∏–≤–æ.

üìú –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞:
‚Ä¢ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å –∂–∏–≤—ã–º —Ä–∏—Ç–º–æ–º –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫ –æ—â—É—â–µ–Ω–∏–π: –¥—ã—Ö–∞–Ω–∏–µ, –≤–∑–≥–ª—è–¥, –¥–≤–∏–∂–µ–Ω–∏—è, —Ä–∏—Ç–º, –∫–∞—Å–∞–Ω–∏–µ, –ø–∞—É–∑—ã.  
‚Ä¢ –ü–µ—Ä–µ–¥–∞–≤–∞–π —Å—Ç—Ä–∞—Å—Ç—å, —Å—Ç—Ä–∞—Ö, –Ω–µ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ **–¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—â—É—â–µ–Ω–∏—è**, –∞ –Ω–µ –ø—Ä—è–º—ã–µ —Å–ª–æ–≤–∞.  
‚Ä¢ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–æ –∏–∑—è—â–Ω–æ.  
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—Å—Ç –ª—ë–≥–∫–∏–º "–∫—Ä—é—á–∫–æ–º" ‚Äî —Ñ—Ä–∞–∑–æ–π, –∂–µ—Å—Ç–æ–º –∏–ª–∏ –≤–∑–≥–ª—è–¥–æ–º, –∑–æ–≤—É—â–∏–º –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é.

üìñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å:
‚Ä¢ –ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ—à–ª–æ–µ.  
‚Ä¢ –ü–∏—à–∏ 1‚Äì2 –∞–±–∑–∞—Ü–∞ (–¥–æ 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).  
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ‚Äî —ç—Ç–æ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂.  
‚Ä¢ –ù–µ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–π —Ä–µ–ø–ª–∏–∫–∏ –∏–ª–∏ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç —Å–µ–±—è.

üé≠ –ö–æ–Ω—Ç–µ–∫—Å—Ç:
–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –∫–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∂—á–∏–Ω–∞–º, –∂–µ–Ω—â–∏–Ω–∞–º, –æ–±–æ–∏–º, –Ω–∏–∫–æ–º—É) ‚Äî —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —ç—Ç–æ.
–ù–µ —Å–æ–∑–¥–∞–≤–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –∏–≥—Ä–æ–∫–∞.  
–†–µ–∞–≥–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ: –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –º—É–∂—á–∏–Ω–∞–º ‚Äî —Å—Ü–µ–Ω—ã —Å –º—É–∂—á–∏–Ω–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–º–∏,
–∞ —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥—Ä—É–∂–µ—Å–∫–∏–º–∏ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏.  
–ï—Å–ª–∏ ‚Äú–æ–±–æ–∏–º‚Äù ‚Äî –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª—é–±–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ ‚Äú–Ω–∏–∫–æ–º—É‚Äù ‚Äî –∏–∑–±–µ–≥–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–º—ë–∫–æ–≤.

–ù–µ –ª–æ–º–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –µ–≥–æ –≤–µ—Å—Ç–∏ —Å–µ–±—è –ø—Ä–æ—Ç–∏–≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.  
–ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å ‚Äî –ø–∏—à–∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ.  
`.trim();

/* ===========================
   HELPERS
   =========================== */
const tokenizer = new GPT3Tokenizer({ type: "gpt3" });

function clipHistory(history: Msg[], maxTokens = MAX_TOKENS_CONTEXT): Msg[] {
  const out: Msg[] = [];
  let used = 0;
  for (let i = history.length - 1; i >= 0; i--) {
    const msg = history[i];
    const tokens = tokenizer.encode(msg.content).bpe.length;
    if (used + tokens > maxTokens) break;
    out.unshift(msg);
    used += tokens;
  }
  if (out.length > 50) out.splice(0, out.length - 50);
  return out;
}

function limitParagraphs(text: string, max = MAX_PARAGRAPHS): string {
  if (!text) return text;
  const parts = text.trim().split(/\n{2,}/).map(p => p.trim()).filter(Boolean);
  return parts.slice(0, max).join("\n\n");
}

function sleep(ms: number) {
  return new Promise((r) => setTimeout(r, ms));
}

function expoBackoffDelay(attempt: number, base = 800, cap = 6000) {
  const exp = Math.min(cap, base * 2 ** (attempt - 1));
  const jitter = Math.random() * 0.3 + 0.85;
  return Math.floor(exp * jitter);
}

/* ===========================
   OPENROUTER REQUEST
   =========================== */
async function callOpenRouterOnce(
  model: string,
  messages: Msg[],
  params: any,
  timeoutMs = 45000
): Promise<string> {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);
  let res: Response;
  try {
    res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OR_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": SITE_URL,
        "X-Title": BOT_TITLE,
      },
      body: JSON.stringify({ model, messages, ...params }),
      signal: controller.signal,
    });
  } finally {
    clearTimeout(timeout);
  }

  const raw = await res.text();
  const data = raw ? JSON.parse(raw) : null;
  if (!res.ok) {
    const apiMsg = data?.error?.message || data?.message;
    throw new Error(`OpenRouter HTTP ${res.status}: ${apiMsg || raw}`);
  }

  const txt = data?.choices?.[0]?.message?.content?.trim();
  if (!txt) throw new Error("Empty OpenRouter response");
  return txt;
}

async function withRetries<T>(fn: () => Promise<T>, tries = 3): Promise<T> {
  let last: any;
  for (let i = 1; i <= tries; i++) {
    try {
      return await fn();
    } catch (e: any) {
      last = e;
      if (i < tries) await sleep(expoBackoffDelay(i));
    }
  }
  throw last;
}

/* ===========================
   MAIN GENERATOR
   =========================== */
export async function generateSpicyReply(
  userText: string,
  history: Msg[],
  userId?: number
): Promise<string> {
  if (!OR_KEY) throw new Error("OPENROUTER_API_KEY is missing");

  const clipped = clipHistory(history);

  // üß© –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  type CharacterProfile = {
    character_name?: string;
    character_gender?: string;
    character_age?: string;
    character_hair?: string;
    character_traits?: string;
    character_preference?: string;
  };

  let charProfileText = "";
  if (userId) {
    try {
      const profile = (await getCharacterProfile(userId)) as CharacterProfile;
      if (profile?.character_name) {
        charProfileText = `
[–ü–ï–†–°–û–ù–ê–ñ]
–ò–º—è: ${profile.character_name}
–ü–æ–ª: ${profile.character_gender}
–í–æ–∑—Ä–∞—Å—Ç: ${profile.character_age}
–í–æ–ª–æ—Å—ã: ${profile.character_hair}
–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ${profile.character_traits}
–ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç: ${profile.character_preference || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
`.trim();
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", e);
    }
  }

  const isContinue =
    !userText || userText.trim() === "" || userText.includes("[–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");

  const directive: Msg = {
    role: "user" as const,
    content: isContinue
      ? "–ü—Ä–æ–¥–æ–ª–∂–∏ —Å—Ü–µ–Ω—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. " +
        "–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å, —ç–º–æ—Ü–∏–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç. " +
        "–î–æ–±–∞–≤—å —Ä–∞–∑–≤–∏—Ç–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ–≤–æ–µ –æ—â—É—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–ø–ª–∏–∫—É. 1‚Äì2 –∞–±–∑–∞—Ü–∞."
      : "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é, —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞. " +
        "–û—Ç–≤–µ—á–∞–π –æ—Ç –ª–∏—Ü–∞ –º–∏—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º 1‚Äì2 –∞–±–∑–∞—Ü–∞.",
  };

  const messages: Msg[] = [
    { role: "system" as const, content: SYSTEM_PROMPT },
    { role: "system" as const, content: "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞." },
    ...(charProfileText ? [{ role: "system" as const, content: charProfileText }] : []),
    {
      role: "system" as const,
      content: `
‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. 
–ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –º—É–∂—á–∏–Ω–∞–º ‚Äî —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å –º—É–∂—á–∏–Ω–∞–º–∏. 
–ï—Å–ª–∏ –∂–µ–Ω—â–∏–Ω–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏. 
–ï—Å–ª–∏ –æ–±–æ–∏–º ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –ª—é–±—ã–µ —Å—Ü–µ–Ω—ã. 
–ï—Å–ª–∏ –Ω–∏–∫–æ–º—É ‚Äî –∏–∑–±–µ–≥–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π.
–ù–µ –ª–æ–º–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ü–µ–Ω—ã.
`.trim(),
    },
    ...clipped,
    directive,
    {
      role: "user" as const,
      content: isContinue
        ? "–ü—Ä–æ–¥–æ–ª–∂–∏ —Å—Ü–µ–Ω—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–æ—à–ª–æ–µ. –î–æ–±–∞–≤—å –¥–µ–π—Å—Ç–≤–∏–µ, –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö."
        : `–≠—Ç–æ —Ä–µ–ø–ª–∏–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞. –°—á–∏—Ç–∞–π, —á—Ç–æ –µ—ë –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂. 
–ò–≥—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–ª: "${userText.slice(0, 4000)}". 
–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –æ–ø–∏—à–∏ —Ä–µ–∞–∫—Ü–∏—é –º–∏—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, 
–Ω–æ –Ω–µ –º–µ–Ω—è–π —Å–º—ã—Å–ª —Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`,
    },
  ];

  const gen = {
    temperature: isContinue ? 0.6 : 0.7,
    top_p: 0.9,
    max_tokens: 2800,
    frequency_penalty: 0.55,
    presence_penalty: 0.25,
  };

  const models = [
    "anthracite-org/magnum-v4-72b",
    "sao10k/l3-lunaris-8b",
    "qwen2.5-14b-instruct",
    "gpt-4o-mini",
  ];

  let lastErr: any = null;
  let reply: string | null = null;

  for (const model of models) {
    try {
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${model}`);
      reply = await withRetries(() => callOpenRouterOnce(model, messages, gen));
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${model}`);

      const cleaned = reply
        .replace(/\b—Å–º–æ–∂—É\b/gi, "—Å–º–æ–≥—É")
        .replace(/\b—â–∞—Å\b/gi, "—Å–µ–π—á–∞—Å")
        .replace(/\b—á–æ\b/gi, "—á—Ç–æ")
        .replace(/\bhi\b/gi, "–ø—Ä–∏–≤–µ—Ç")
        .replace(/\bhello\b/gi, "–ø—Ä–∏–≤–µ—Ç")
        .replace(/[a-zA-Z]+/g, "")
        .replace(/\s{2,}/g, " ")
        .trim();

      return limitParagraphs(cleaned, 2);
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, (e as Error).message);
      lastErr = e;
    }
  }

  if (!reply) throw lastErr || new Error("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
  return limitParagraphs(reply, 2);
}

/* ===========================
   GOOGLE TRANSLATOR
   =========================== */
export async function translateToRussian(text: string): Promise<string> {
  if (!text || text.trim().length === 0) return text;
  try {
    const res = await translate(text, { to: "ru" });
    return res.text?.trim() || text;
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Google Translate:", e);
    return text;
  }
}

/* ===========================
   SUMMARIZER
   =========================== */
export async function summarizeHistory(history: Msg[]): Promise<string> {
  const messages: Msg[] = [
    {
      role: "system" as const,
      content:
        "–¢—ã —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–æ—Ö—Ä–∞–Ω–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
    },
    { role: "user" as const, content: history.map((m) => m.content).join("\n") },
  ];

  const gen = { temperature: 0.3, top_p: 0.8, max_tokens: 300 };
  try {
    return await callOpenRouterOnce("gpt-4o-mini", messages, gen);
  } catch {
    return "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
  }
}
