// src/llm.ts
import "dotenv/config";
// @ts-ignore ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–µ–∑ TS-—Ç–∏–ø–æ–≤
import translate from "@vitalets/google-translate-api";
import GPT3Tokenizer from "gpt3-tokenizer";
import { getCharacterProfile } from "./db";

/* ===========================
   CONSTANTS
   =========================== */
const MAX_PARAGRAPHS = 2;
const MAX_TOKENS_CONTEXT = 4096;

export type Msg = { role: "system" | "user" | "assistant"; content: string };

/* ===========================
   MODEL CONFIG
   =========================== */
const OR_KEY = process.env.OPENROUTER_API_KEY || "";
const SITE_URL = process.env.SITE_URL || "http://localhost";
const BOT_TITLE = process.env.BOT_TITLE || "YourWorldSimulator";

/* ===========================
   SYSTEM PROMPT
   =========================== */
const SYSTEM_PROMPT = `
–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ.  
–ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.  
–¢–µ–∫—Å—Ç ‚Äî —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π, —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –æ—â—É—â–µ–Ω–∏—è–º–∏.  
1‚Äì2 –∞–±–∑–∞—Ü–∞, –±–µ–∑ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –ø—Ä–æ—à–ª–æ–≥–æ.  
–°–æ–±–ª—é–¥–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
`.trim();

/* ===========================
   HELPERS
   =========================== */
const tokenizer = new GPT3Tokenizer({ type: "gpt3" });

function clipHistory(history: Msg[], maxTokens = MAX_TOKENS_CONTEXT): Msg[] {
  const out: Msg[] = [];
  let used = 0;
  for (let i = history.length - 1; i >= 0; i--) {
    const msg = history[i];
    const tokens = tokenizer.encode(msg.content).bpe.length;
    if (used + tokens > maxTokens) break;
    out.unshift(msg);
    used += tokens;
  }
  return out.slice(-50); // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
}

function limitParagraphs(text: string, max = MAX_PARAGRAPHS): string {
  if (!text) return text;
  const parts = text
    .trim()
    .split(/\n{2,}/)
    .map((p) => p.trim())
    .filter(Boolean);
  return parts.slice(0, max).join("\n\n");
}

function sleep(ms: number) {
  return new Promise((r) => setTimeout(r, ms));
}

function expoBackoffDelay(attempt: number, base = 800, cap = 6000) {
  const exp = Math.min(cap, base * 2 ** (attempt - 1));
  const jitter = Math.random() * 0.3 + 0.85;
  return Math.floor(exp * jitter);
}

/* ===========================
   OPENROUTER REQUEST
   =========================== */
async function callOpenRouterOnce(
  model: string,
  messages: Msg[],
  params: any,
  timeoutMs = 45000
): Promise<string> {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);

  try {
    const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OR_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": SITE_URL,
        "X-Title": BOT_TITLE,
      },
      body: JSON.stringify({ model, messages, ...params }),
      signal: controller.signal,
    });

    const raw = await res.text();
    const data = raw ? JSON.parse(raw) : null;
    if (!res.ok) throw new Error(`HTTP ${res.status}: ${data?.error?.message || raw}`);

    const txt = data?.choices?.[0]?.message?.content?.trim();
    if (!txt) throw new Error("Empty response from OpenRouter");
    return txt;
  } finally {
    clearTimeout(timeout);
  }
}

async function withRetries<T>(fn: () => Promise<T>, tries = 3): Promise<T> {
  let last: any;
  for (let i = 1; i <= tries; i++) {
    try {
      return await fn();
    } catch (e) {
      last = e;
      if (i < tries) await sleep(expoBackoffDelay(i));
    }
  }
  throw last;
}

/* ===========================
   MAIN GENERATOR
   =========================== */
export async function generateSpicyReply(
  userText: string,
  history: Msg[],
  userId?: number
): Promise<string> {
  if (!OR_KEY) throw new Error("OPENROUTER_API_KEY is missing");

  const clipped = clipHistory(history);

  // üß© –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  let charProfileText = "";
  if (userId) {
    try {
      const profile = await getCharacterProfile(userId);
      if (profile && profile.character_name) {
        charProfileText = `
[–ü–ï–†–°–û–ù–ê–ñ]
–ò–º—è: ${profile.character_name}
–ü–æ–ª: ${profile.character_gender}
–í–æ–∑—Ä–∞—Å—Ç: ${profile.character_age}
–í–æ–ª–æ—Å—ã: ${profile.character_hair}
–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ${profile.character_traits}
–ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç: ${profile.character_preference || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
`;
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", e);
    }
  }

  const isContinue =
    !userText || userText.trim() === "" || userText.includes("[–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");

  const directive: Msg = {
    role: "user",
    content: isContinue
      ? "–ü—Ä–æ–¥–æ–ª–∂–∏ —Å—Ü–µ–Ω—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–æ—à–ª–æ–µ."
      : "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é, —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞, –æ—Ç –ª–∏—Ü–∞ –º–∏—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
  };

  const messages: Msg[] = [
    { role: "system", content: SYSTEM_PROMPT },
    { role: "system", content: "–ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ." },
    ...(charProfileText ? [{ role: "system", content: charProfileText.trim() }] : []),
    ...clipped,
    directive,
  ];

  const gen = {
    temperature: isContinue ? 0.62 : 0.72,
    top_p: 0.9,
    max_tokens: 2800,
    frequency_penalty: 0.55,
    presence_penalty: 0.25,
  };

  const models = [
    "anthracite-org/magnum-v4-72b",
    "sao10k/l3-lunaris-8b",
    "qwen2.5-14b-instruct",
    "gpt-4o-mini",
  ];

  let reply: string | null = null;
  let lastErr: any = null;

  for (const model of models) {
    try {
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${model}`);
      reply = await withRetries(() => callOpenRouterOnce(model, messages, gen));
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${model}`);
      break;
    } catch (e: any) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ ${model}:`, e.message);
      lastErr = e;
    }
  }

  if (!reply) throw lastErr || new Error("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");

  // üßπ –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞
  const cleaned = reply
    .replace(/[a-zA-Z]+/g, "") // —É–±–∏—Ä–∞–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É
    .replace(/\s{2,}/g, " ")
    .trim();

  return limitParagraphs(cleaned, 2);
}

/* ===========================
   TRANSLATION
   =========================== */
export async function translateToRussian(text: string): Promise<string> {
  if (!text || !text.trim()) return text;
  try {
    const res = await translate(text, { to: "ru" });
    return res.text?.trim() || text;
  } catch {
    return text;
  }
}

/* ===========================
   SUMMARIZER
   =========================== */
export async function summarizeHistory(history: Msg[]): Promise<string> {
  const messages: Msg[] = [
    {
      role: "system",
      content: "–¢—ã —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –°–æ–∫—Ä–∞—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–æ—Ö—Ä–∞–Ω–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
    },
    { role: "user", content: history.map((m) => m.content).join("\n") },
  ];

  const gen = { temperature: 0.3, top_p: 0.8, max_tokens: 300 };

  try {
    return await callOpenRouterOnce("gpt-4o-mini", messages, gen);
  } catch {
    return "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
  }
}
