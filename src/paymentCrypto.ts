// src/paymentCrypto.ts
import "dotenv/config";
import express from "express";
import axios from "axios";
import Database from "better-sqlite3";

const router = express.Router();
router.use(express.json());

/* ===========================
   üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   =========================== */
const CRYPTOCLOUD_API_KEY = process.env.CRYPTOCLOUD_API_KEY!;
const CRYPTOCLOUD_SHOP_ID = process.env.CRYPTOCLOUD_SHOP_ID!;
const BASE_URL = "https://api.cryptocloud.plus/v1";
const CALLBACK_SECRET = process.env.CALLBACK_SECRET || "my_secret_key";

const db = new Database("data.db");

/* ===========================
   1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
   =========================== */
export async function createPayment(userId: number, amount = 5) {
  try {
    const res = await axios.post(
      `${BASE_URL}/invoice/create`,
      {
        shop_id: CRYPTOCLOUD_SHOP_ID,
        amount: amount,
        currency: "USDT_TRC20",
        order_id: `${userId}_${Date.now()}`,
        description: "Premium-–¥–æ—Å—Ç—É–ø –≤ YourWorldSimulator –Ω–∞ 30 –¥–Ω–µ–π",
        lifetime: 3600,
      },
      {
        headers: {
          Authorization: `Token ${CRYPTOCLOUD_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ –û—Ç–≤–µ—Ç CryptoCloud:", res.data);

    // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ pay_url
    const payUrl = res.data?.pay_url || res.data?.result?.link;
    if (!payUrl) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã");

    return payUrl;
  } catch (err: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã:", err.response?.data || err.message);
    throw err;
  }
}

/* ===========================
   2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (callback –æ—Ç CryptoCloud)
   =========================== */
/* ===========================
   2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (webhook)
   =========================== */
router.post("/callback", express.json(), async (req, res) => {
  try {
    console.log("üì© –ü–æ–ª—É—á–µ–Ω callback –æ—Ç CryptoCloud:", req.body);
        const receivedSecret = req.headers["x-secret-key"] || req.body.secret;
    if (CALLBACK_SECRET && receivedSecret && receivedSecret !== CALLBACK_SECRET) {
      console.warn("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ callback");
      return res.status(403).json({ ok: false, error: "Invalid secret" });
    }


    const { status, order_id } = req.body;

    if (status === "paid" && order_id) {
      const userId = parseInt(order_id.split("_")[0]);
      console.log(`üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª Premium.`);

      const db = require("better-sqlite3")("data.db");
      db.prepare("UPDATE users SET premium = 1 WHERE id = ?").run(userId);

      console.log(`‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }

    res.status(200).json({ ok: true });
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:", err);
    res.status(500).json({ ok: false });
  }
});


/* ===========================
   3Ô∏è‚É£ –ü–æ–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ Premium
   =========================== */
function markUserAsPremium(userId: number) {
  try {
    db.prepare("UPDATE users SET premium = 1 WHERE id = ?").run(userId);
    console.log(`‚≠ê Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞:", err);
  }
}

/* ===========================
   4Ô∏è‚É£ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –°—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞ / –æ—à–∏–±–∫–∏
   =========================== */
router.get("/payment/success", (req, res) => {
  res.send("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.");
});

router.get("/payment/fail", (req, res) => {
  res.send("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.");
});

export default router;
