import express from "express";
import fetch from "node-fetch";
import Database from "better-sqlite3";

const router = express.Router();
const db = new Database("data.db");

// üîë OAuth –¥–∞–Ω–Ω—ã–µ –∏–∑ Render Environment
const CLIENT_ID = process.env.PATREON_CLIENT_ID!;
const CLIENT_SECRET = process.env.PATREON_CLIENT_SECRET!;
const REDIRECT_URI = "https://telegram-bot-mvp-il0f.onrender.com/patreon/callback";

/* ========================================
   1Ô∏è‚É£ –°—Ç–∞—Ä—Ç OAuth2 ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ Patreon
======================================== */
router.get("/patreon/start", (req, res) => {
  const tgId = req.query.tg;
  if (!tgId) return res.status(400).send("‚ùå Missing Telegram ID");

  const authUrl = new URL("https://www.patreon.com/oauth2/authorize");
  authUrl.searchParams.set("response_type", "code");
  authUrl.searchParams.set("client_id", CLIENT_ID);
  authUrl.searchParams.set("redirect_uri", REDIRECT_URI);
  authUrl.searchParams.set("scope", "identity identity[email] memberships");
  authUrl.searchParams.set("state", tgId.toString());

  console.log(`üîó OAuth redirect –¥–ª—è TG ${tgId}`);
  res.redirect(authUrl.toString());
});

/* ========================================
   2Ô∏è‚É£ Callback ‚Äî –æ–±–º–µ–Ω code ‚Üí access_token
======================================== */
router.get("/patreon/callback", async (req, res) => {
  try {
    const code = req.query.code as string;
    const tgId = req.query.state as string;
    if (!code || !tgId) return res.status(400).send("‚ùå Missing data");

    console.log(`üéØ Patreon callback –¥–ª—è TG ${tgId}`);

    // üîÅ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const tokenRes = await fetch("https://www.patreon.com/api/oauth2/token", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        code,
        grant_type: "authorization_code",
        client_id: CLIENT_ID,
        client_secret: CLIENT_SECRET,
        redirect_uri: REDIRECT_URI,
      }),
    });

    const tokenData = await tokenRes.json();
    const accessToken = tokenData.access_token;

    if (!accessToken) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", tokenData);
      return res.status(500).send("OAuth error");
    }

    // üë§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRes = await fetch(
      "https://www.patreon.com/api/oauth2/v2/identity?include=memberships&fields[email]=email,full_name",
      { headers: { Authorization: `Bearer ${accessToken}` } }
    );

    const userData = await userRes.json();
    const email = userData.data?.attributes?.email || "unknown";
    const name = userData.data?.attributes?.full_name || "Unknown";

    console.log(`‚úÖ Patreon –ø–æ–¥–∫–ª—é—á–µ–Ω: ${name} (${email}) –¥–ª—è Telegram ID ${tgId}`);

    // üíæ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º premium (–±–µ–∑ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫)
    db.prepare("UPDATE users SET premium = 1 WHERE id = ?").run(tgId);
    console.log(`üíé Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è Telegram ID ${tgId}`);

    // üß† –ú–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å email –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    // üñ• –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    res.send(`
      <html>
        <body style="font-family:sans-serif;text-align:center;margin-top:50px;">
          <h2>‚úÖ Patreon —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</h2>
          <p>–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram-–±–æ—Ç–∞.</p>
          <p style="opacity:0.6;">TG ID: ${tgId}<br>Email: ${email}</p>
        </body>
      </html>
    `);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ Patreon callback:", err);
    res.status(500).send("Server error");
  }
});

export default router;
