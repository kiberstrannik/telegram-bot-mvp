import "dotenv/config";
import express, { Request, Response } from "express";
import axios from "axios";
import Database from "better-sqlite3";

const router = express.Router();
router.use(express.json());

/* ===========================
   üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   =========================== */
const CRYPTOCLOUD_API_KEY = process.env.CRYPTOCLOUD_API_KEY!;
const CRYPTOCLOUD_SHOP_ID = process.env.CRYPTOCLOUD_SHOP_ID!;
const BASE_URL = "https://api.cryptocloud.plus/v1";
const CALLBACK_SECRET = process.env.CALLBACK_SECRET || "my_secret_key";

const db = new Database("data.db");

/* ===========================
   1Ô∏è‚É£ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ä—Ç–∞ –æ–ø–ª–∞—Ç—ã
   =========================== */
router.get("/payment/start", (req: Request, res: Response) => {
  res.send(`
    <html>
      <head>
        <meta charset="utf-8"/>
        <title>–û–ø–ª–∞—Ç–∞ Premium ‚Äî YourWorldSimulator</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #0e0f14;
            color: #e8e8e8;
            text-align: center;
            margin-top: 100px;
          }
          a {
            background: #007aff;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 8px;
            font-size: 18px;
          }
          a:hover {
            background: #005ecc;
          }
        </style>
      </head>
      <body>
        <h1>üíé –û–ø–ª–∞—Ç–∞ Premium</h1>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–∏—Ä–∞ YourWorldSimulator.</p>
        <a href="/payment/success">üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π / CryptoCloud</a>
      </body>
    </html>
  `);
});

/* ===========================
   2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã
   =========================== */
export async function createPayment(userId: number, amount = 5) {
  try {
    const res = await axios.post(
      `${BASE_URL}/invoice/create`,
      {
        shop_id: CRYPTOCLOUD_SHOP_ID,
        amount,
        currency: "USDT_TRC20",
        order_id: `${userId}_${Date.now()}`,
        description: "Premium-–¥–æ—Å—Ç—É–ø –≤ YourWorldSimulator –Ω–∞ 30 –¥–Ω–µ–π",
        lifetime: 3600,
      },
      {
        headers: {
          Authorization: `Token ${CRYPTOCLOUD_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ –û—Ç–≤–µ—Ç CryptoCloud:", res.data);

    const payUrl = res.data?.pay_url || res.data?.result?.link;
    if (!payUrl) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã");

    return payUrl;
  } catch (err: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã:", err.response?.data || err.message);
    throw err;
  }
}

/* ===========================
   3Ô∏è‚É£ Callback –æ—Ç CryptoCloud
   =========================== */
router.post("/callback", async (req: Request, res: Response) => {
  try {
    console.log("üì© –ü–æ–ª—É—á–µ–Ω callback –æ—Ç CryptoCloud:", req.body);
    const receivedSecret = req.headers["x-secret-key"] || req.body.secret;

    if (CALLBACK_SECRET && receivedSecret && receivedSecret !== CALLBACK_SECRET) {
      console.warn("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ callback");
      return res.status(403).json({ ok: false, error: "Invalid secret" });
    }

    const { status, order_id } = req.body;

    if (status === "paid" && order_id) {
      const userId = parseInt(order_id.split("_")[0]);
      db.prepare("UPDATE users SET premium = 1 WHERE id = ?").run(userId);
      console.log(`‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }

    res.status(200).json({ ok: true });
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:", err);
    res.status(500).json({ ok: false });
  }
});

/* ===========================
   4Ô∏è‚É£ –°—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞ / –æ—à–∏–±–∫–∏
   =========================== */
router.get("/payment/success", (req: Request, res: Response) => {
  res.send(`
    <html>
      <head><meta charset="utf-8"/><title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title></head>
      <body style="text-align:center; font-family:sans-serif; margin-top:100px;">
        <h2>‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h2>
        <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.</p>
      </body>
    </html>
  `);
});

router.get("/payment/fail", (req: Request, res: Response) => {
  res.send(`
    <html>
      <head><meta charset="utf-8"/><title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title></head>
      <body style="text-align:center; font-family:sans-serif; margin-top:100px;">
        <h2>‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.</h2>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.</p>
      </body>
    </html>
  `);
});

export default router;
