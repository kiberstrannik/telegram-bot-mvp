// src/llm.ts
import "dotenv/config";
// @ts-ignore ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–µ–∑ TS-—Ç–∏–ø–æ–≤
import * as translateModule from "@vitalets/google-translate-api";
const translate = (translateModule as any).default || translateModule;

import GPT3Tokenizer from "gpt3-tokenizer";
import { getCharacterProfile } from "./db";

/* ===========================
   CONSTANTS
   =========================== */
const MAX_PARAGRAPHS = 2;
const MAX_TOKENS_CONTEXT = 4096;

export type Msg = { role: "system" | "user" | "assistant"; content: string };

/* ===========================
   MODEL CONFIG
   =========================== */
const OR_KEY = process.env.OPENROUTER_API_KEY || "";
const SITE_URL = process.env.SITE_URL || "http://localhost";
const BOT_TITLE = process.env.BOT_TITLE || "YourWorldSimulator";

/* ===========================
   SYSTEM PROMPT
   =========================== */
const SYSTEM_PROMPT = `
–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ.  
–¢—ã –≤–µ–¥—ë—à—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, —Å–æ–∑–¥–∞–≤–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —ç–º–æ—Ü–∏–∏ –∏ –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.  
–ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ.  
–ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –¥–∏–∞–ª–æ–≥ ‚Äî –ø–∏—à–∏ —Ä–µ–ø–ª–∏–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.  
–ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º —Å —Å–æ–±–æ–π ‚Äî –≤—ã–¥–µ–ª—è–π —ç—Ç–æ –∫—É—Ä—Å–∏–≤–æ–º.  
–ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ –∏–Ω—Ç–∏–º–Ω–∞—è ‚Äî –ø–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ, –∏–∑–±–µ–≥–∞—è –ø–æ—à–ª–æ—Å—Ç–∏.  
–ï—Å–ª–∏ –º–æ–º–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏ —É–∂–µ –æ–ø–∏—Å–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ—Å–ª–µ–≤–∫—É—Å–∏—é –∏–ª–∏ –Ω–æ–≤–æ–º—É —Å–æ–±—ã—Ç–∏—é:  
–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–∑–∂–µ, –ª—ë–∂–∞ —Ä—è–¥–æ–º..." –∏–ª–∏ "–£—Ç—Ä–æ –ø—Ä–∏–Ω–µ—Å–ª–æ —Ç–∏—à–∏–Ω—É –∏ —Å—Ç—Ä–∞–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –ø–æ–∫–æ—è".

üìú –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞:
‚Ä¢ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å –∂–∏–≤—ã–º —Ä–∏—Ç–º–æ–º.  
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—Å—Ç –ª—ë–≥–∫–∏–º –∫—Ä—é—á–∫–æ–º ‚Äî —Ñ—Ä–∞–∑–æ–π, –≤–∑–≥–ª—è–¥–æ–º, –Ω–∞–º—ë–∫–æ–º –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.

üìñ –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ—à–ª–æ–µ.  
‚Ä¢ –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Å—Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∏.  
‚Ä¢ –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –æ–ø–∏—Å–∞–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–æ–º–µ–Ω—Ç—É.  
‚Ä¢ –ü–∏—à–∏ 1‚Äì2 –∞–±–∑–∞—Ü–∞ (–¥–æ 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).  
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ‚Äî —ç—Ç–æ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂.  
‚Ä¢ –ù–µ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–π —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç —Å–µ–±—è.

üé≠ –ö–æ–Ω—Ç–µ–∫—Å—Ç:
–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –∫–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∂—á–∏–Ω–∞–º, –∂–µ–Ω—â–∏–Ω–∞–º, –æ–±–æ–∏–º, –Ω–∏–∫–æ–º—É) ‚Äî —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —ç—Ç–æ.
–ù–µ —Å–æ–∑–¥–∞–≤–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω—ã, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
`.trim();

/* ===========================
   HELPERS
   =========================== */
const tokenizer = new GPT3Tokenizer({ type: "gpt3" });

function clipHistory(history: Msg[], maxTokens = MAX_TOKENS_CONTEXT): Msg[] {
  const out: Msg[] = [];
  let used = 0;
  for (let i = history.length - 1; i >= 0; i--) {
    const msg = history[i];
    const tokens = tokenizer.encode(msg.content).bpe.length;
    if (used + tokens > maxTokens) break;
    out.unshift(msg);
    used += tokens;
  }
  if (out.length > 50) out.splice(0, out.length - 50);
  return out;
}

function limitParagraphs(text: string, max = MAX_PARAGRAPHS): string {
  if (!text) return text;
  const parts = text.trim().split(/\n{2,}/).map(p => p.trim()).filter(Boolean);
  return parts.slice(0, max).join("\n\n");
}

/* ===========================
   SIMILARITY (ANTI-LOOP)
   =========================== */
function similarityRatio(a: string, b: string): number {
  if (!a.length && !b.length) return 1;
  if (!a.length || !b.length) return 0;
  const distance = levenshtein(a, b);
  const maxLen = Math.max(a.length, b.length);
  return 1 - distance / maxLen;
}

function levenshtein(a: string, b: string): number {
  const matrix: number[][] = [];
  const aLen = a.length;
  const bLen = b.length;

  for (let i = 0; i <= aLen; i++) matrix[i] = [i];
  for (let j = 0; j <= bLen; j++) matrix[0][j] = j;

  for (let i = 1; i <= aLen; i++) {
    for (let j = 1; j <= bLen; j++) {
      if (a[i - 1] === b[j - 1]) matrix[i][j] = matrix[i - 1][j - 1];
      else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j - 1] + 1
        );
      }
    }
  }
  return matrix[aLen][bLen];
}

/* ===========================
   OPENROUTER REQUEST
   =========================== */
async function callOpenRouterOnce(
  model: string,
  messages: Msg[],
  params: any,
  timeoutMs = 40000
): Promise<string> {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);
  let res: Response;
  try {
    res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OR_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": SITE_URL,
        "X-Title": BOT_TITLE,
      },
      body: JSON.stringify({ model, messages, ...params }),
      signal: controller.signal,
    });
  } finally {
    clearTimeout(timeout);
  }

  const raw = await res.text();
  const data = raw ? JSON.parse(raw) : null;
  if (!res.ok) {
    const apiMsg = data?.error?.message || data?.message;
    throw new Error(`OpenRouter HTTP ${res.status}: ${apiMsg || raw}`);
  }

  const txt = data?.choices?.[0]?.message?.content?.trim();
  if (!txt) throw new Error("Empty OpenRouter response");
  return txt;
}

/* ===========================
   MAIN GENERATOR
   =========================== */
export async function generateSpicyReply(
  userText: string,
  history: Msg[],
  userId?: number
): Promise<string> {
  if (!OR_KEY) throw new Error("OPENROUTER_API_KEY is missing");

  const clipped = clipHistory(history);
  const shortHistory = clipped.slice(-12); // —á—É—Ç—å –¥–ª–∏–Ω–Ω–µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç

  // üß© –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  let charProfileText = "";
  if (userId) {
    try {
      const profile = await getCharacterProfile(userId);
      if (profile?.character_name) {
        charProfileText = `
[–ü–ï–†–°–û–ù–ê–ñ]
–ò–º—è: ${profile.character_name}
–ü–æ–ª: ${profile.character_gender}
–í–æ–∑—Ä–∞—Å—Ç: ${profile.character_age}
–†–∞—Å–∞: ${profile.character_race || "—á–µ–ª–æ–≤–µ–∫"}
–ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç: ${profile.character_preference || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ü–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å—Ç—Ä–æ–≥–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω ‚Äî –Ω–µ –∏–∑–º–µ–Ω—è–π –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è, –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ.
‚Ä¢ –†–∞—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å—Ç—Ä–æ–≥–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω—è—Ç—å—Å—è.
‚Ä¢ –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —á–µ–ª–æ–≤–µ–∫, –¥–æ–±–∞–≤–ª—è–π –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –µ–≥–æ —Ä–∞—Å–µ (–ø–æ–≤–∞–¥–∫–∏, –º–∏—Ä–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, —Ä–µ—á—å).
‚Ä¢ –°–∏–º–ø–∞—Ç–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: —Å–æ–∑–¥–∞–≤–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –∏–Ω—Ç–∏–º–Ω—ã–µ —Å—Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏, –∫ –∫–æ–º—É –æ–Ω –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Å–∏–º–ø–∞—Ç–∏—é.
‚Ä¢ –ï—Å–ª–∏ —Å–∏–º–ø–∞—Ç–∏—è —É–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ ‚Äú–Ω–∏–∫–æ–º—É‚Äù ‚Äî –∏–∑–±–µ–≥–∞–π –ª—é–±—ã—Ö —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.
`.trim();
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", e);
    }
  }

  const isContinue =
    !userText || userText.trim() === "" || userText.includes("[–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");

  // üé≠ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É ‚Äî –æ–±—ã—á–Ω–∞—è –∏–ª–∏ –∏–Ω—Ç–∏–º–Ω–∞—è
  const isIntimate = /–ø–æ—Ü–µ–ª–æ–≤–∞–ª|–ø—Ä–∏–∫–æ—Å–Ω—É–ª—Å—è|—Ä–∞–∑–¥–µ–ª–∞—Å—å|—Ç–µ–ª–æ|—Å—Ç—Ä–∞—Å—Ç—å|–ø–æ—Ü–µ–ª—É–π|–ª–∞—Å–∫|–≤–æ–∑–±—É–∂|–∂–µ–ª–∞–Ω–∏–µ|–≤–æ–∂–¥–µ–ª/i.test(userText);

  const phaseHint = isIntimate
    ? "–°—Ü–µ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–Ω—Ç–∏–º–Ω–æ–π ‚Äî –æ–ø–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —ç–º–æ—Ü–∏–∏ –∏ –æ—â—É—â–µ–Ω–∏—è. " +
      "–ï—Å–ª–∏ –º–æ–º–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏ —É–∂–µ –±—ã–ª –æ–ø–∏—Å–∞–Ω, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –µ–≥–æ, –∞ –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏—é –∏–ª–∏ –Ω–æ–≤–æ–º—É —Å–æ–±—ã—Ç–∏—é. "
    : "";

  const directive: Msg = {
    role: "user",
    content:
      phaseHint +
      (isContinue
        ? "–ü—Ä–æ–¥–æ–ª–∂–∏ —Å—Ü–µ–Ω—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. " +
          "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ. –î–æ–±–∞–≤—å –Ω–æ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, —ç–º–æ—Ü–∏–∏ –∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é. " +
          "–ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—á–µ—Ä–ø–∞–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–æ–º–µ–Ω—Ç—É. –ü–∏—à–∏ 1‚Äì2 –∞–±–∑–∞—Ü–∞."
        : "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é, —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞. " +
          "–û–ø–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π. –ü–∏—à–∏ 1‚Äì2 –∞–±–∑–∞—Ü–∞."),
  };

  const messages: Msg[] = [
    { role: "system", content: SYSTEM_PROMPT },
    ...(charProfileText ? [{ role: "system" as "system", content: charProfileText }] : []),
    ...shortHistory,
    directive,
  ];

  const gen = {
    temperature: 0.9,
    top_p: 0.92,
    max_tokens: 2600,
    frequency_penalty: 0.25,
    presence_penalty: 0.2,
  };

  const models = [
  "anthracite-org/magnum-v4-72b",
  "sao10k/l3-lunaris-8b",
  "gpt-4o-mini",
  "qwen2.5-14b-instruct",
];

  for (const model of models) {
    try {
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${model}`);
      const reply = await callOpenRouterOnce(model, messages, gen);
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${model}`);

      const cleaned = reply
        .replace(/[a-zA-Z]+/g, "")
        .replace(/!{2,}/g, "!")
        .replace(/\s{2,}/g, " ")
        .trim();

      const limited = limitParagraphs(cleaned, 2);

      // üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
      if (history.length > 0) {
        const lastMsg = history[history.length - 1]?.content || "";
        const similarity = similarityRatio(limited, lastMsg);
        if (similarity > 0.8) {
          console.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä —Å—Ü–µ–Ω—ã. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");
          return "–°—Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –¥—ã—Ö–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–Ω–æ—Å–∏—Ç –≥–µ—Ä–æ–µ–≤ –¥–∞–ª—å—à–µ. " +
                 "–î–æ–±–∞–≤—å –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å, –æ—â—É—â–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∞—Å—å.";
        }
      }

      return limited;
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, (e as Error).message);
    }
  }

  throw new Error("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
}

/* ===========================
   TRANSLATOR
   =========================== */
export async function translateToRussian(text: string): Promise<string> {
  if (!text || text.trim().length === 0) return text;
  try {
    const res = await translate(text, { to: "ru" });
    return res.text?.trim() || text;
  } catch {
    return text;
  }
}

/* ===========================
   SUMMARIZER
   =========================== */
export async function summarizeHistory(history: Msg[]): Promise<string> {
  const messages: Msg[] = [
    {
      role: "system",
      content:
        "–¢—ã —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–æ—Ö—Ä–∞–Ω–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
    },
    { role: "user", content: history.map((m) => m.content).join("\n") },
  ];

  const gen = { temperature: 0.3, top_p: 0.8, max_tokens: 300 };
  try {
    return await callOpenRouterOnce("gpt-4o-mini", messages, gen);
  } catch {
    return "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
  }
}
