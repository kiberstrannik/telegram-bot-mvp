// src/llm.ts
import "dotenv/config";
import GPT3Tokenizer from "gpt3-tokenizer";
import translate from "@vitalets/google-translate-api";

/* ===========================
   CONSTANTS
   =========================== */
const MAX_PARAGRAPHS = 2;
const MAX_TOKENS_CONTEXT = 2500;

/** Message format */
export type Msg = { role: "system" | "user" | "assistant"; content: string };

/* ===========================
   MODEL CONFIG
   =========================== */
const OR_KEY = process.env.OPENROUTER_API_KEY || "";
const SITE_URL = process.env.SITE_URL || "http://localhost";
const BOT_TITLE = process.env.BOT_TITLE || "YourWorldSimulator";

/* ===========================
   SYSTEM PROMPT
   =========================== */
const SYSTEM_PROMPT = `
–¢—ã ‚Äî —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ.  
–¢—ã –≤–µ–¥—ë—à—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, —Å–æ–∑–¥–∞–≤–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —ç–º–æ—Ü–∏–∏ –∏ –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.  
–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –∂–∏–≤–æ–≥–æ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –∞ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑ –∏–ª–∏ —Ä–µ–∑—é–º–µ.  

üìú –°—Ç–∏–ª—å –ø–∏—Å—å–º–∞:
‚Ä¢ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π, —Å –ø–ª–∞–≤–Ω—ã–º —Ä–∏—Ç–º–æ–º –∏ —ç–º–æ—Ü–∏—è–º–∏.  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫ –æ—â—É—â–µ–Ω–∏–π: –¥—ã—Ö–∞–Ω–∏–µ, –∂–µ—Å—Ç—ã, –≤–∑–≥–ª—è–¥, –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ, —Ç–µ–º–ø, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.  
‚Ä¢ –ü–µ—Ä–µ–¥–∞–≤–∞–π —Å—Ç—Ä–∞—Å—Ç—å, —Å—Ç—Ä–∞—Ö, –Ω–µ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —è—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ **–æ—â—É—â–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è**, –∞ –Ω–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ —Å–ª–æ–≤–∞.  
‚Ä¢ –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ—à–ª–æ—Å—Ç–∏, –Ω–æ **–Ω–µ –±–æ–π—Å—è —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏** ‚Äî –ø–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ –∏ –∏–Ω—Ç–∏–º–Ω–æ, –∫–∞–∫ –≤ —Ö–æ—Ä–æ—à–µ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ.  
‚Ä¢ –î–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫–∏–π –∫—Ä—é—á–æ–∫ –≤ –∫–æ–Ω—Ü–µ ‚Äî –¥–µ—Ç–∞–ª—å, –∂–µ—Å—Ç –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–º–µ–∫–∞–µ—Ç –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.

üìñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å:
‚Ä¢ –ü–∏—à–∏ 1‚Äì2 –∞–±–∑–∞—Ü–∞, –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.  
‚Ä¢ –ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ—à–ª—ã–µ —Å–æ–±—ã—Ç–∏—è.  
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–∏–Ω–∏–º–∞–π –∏—Ö –±—É–∫–≤–∞–ª—å–Ω–æ –∏ –æ—Ç–≤–µ—á–∞–π –æ—Ç –ª–∏—Ü–∞ –º–∏—Ä–∞ –∏ NPC.  
‚Ä¢ –î–µ—Ä–∂–∏ –ø–ª–∞–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏–µ–º, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —ç–º–æ—Ü–∏—è–º–∏.  

üé≠ –ö–æ–Ω—Ç–µ–∫—Å—Ç:
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≤–Ω–µ—à–Ω–æ—Å—Ç—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä),  
–∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∑–≤—É—á–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ.
`.trim();

/* ===========================
   HELPERS
   =========================== */
const tokenizer = new GPT3Tokenizer({ type: "gpt3" });

function clipHistory(history: Msg[], maxTokens = MAX_TOKENS_CONTEXT): Msg[] {
  const out: Msg[] = [];
  let used = 0;
  for (let i = history.length - 1; i >= 0; i--) {
    const msg = history[i];
    const tokens = tokenizer.encode(msg.content).bpe.length;
    if (used + tokens > maxTokens) break;
    out.unshift(msg);
    used += tokens;
  }
  return out;
}

function limitParagraphs(text: string, max = MAX_PARAGRAPHS): string {
  if (!text) return text;
  const parts = text
    .trim()
    .split(/\n{2,}/)
    .map((p) => p.trim())
    .filter(Boolean);
  return parts.slice(0, max).join("\n\n");
}

function sleep(ms: number) {
  return new Promise((r) => setTimeout(r, ms));
}

function expoBackoffDelay(attempt: number, base = 800, cap = 6000) {
  const exp = Math.min(cap, base * 2 ** (attempt - 1));
  const jitter = Math.random() * 0.3 + 0.85;
  return Math.floor(exp * jitter);
}

/* ===========================
   OPENROUTER REQUEST
   =========================== */
async function callOpenRouterOnce(
  model: string,
  messages: Msg[],
  params: any,
  timeoutMs = 45000
): Promise<string> {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);
  let res: Response;

  try {
    res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OR_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": SITE_URL,
        "X-Title": BOT_TITLE,
      },
      body: JSON.stringify({ model, messages, ...params }),
      signal: controller.signal,
    });
  } finally {
    clearTimeout(timeout);
  }

  const raw = await res.text();
  const data = raw ? JSON.parse(raw) : null;

  if (!res.ok) {
    const apiMsg = data?.error?.message || data?.message;
    throw new Error(`OpenRouter HTTP ${res.status}: ${apiMsg || raw}`);
  }

  const txt = data?.choices?.[0]?.message?.content?.trim();
  if (!txt) throw new Error("Empty OpenRouter response");
  return txt;
}

async function withRetries<T>(fn: () => Promise<T>, tries = 3): Promise<T> {
  let last: any;
  for (let i = 1; i <= tries; i++) {
    try {
      return await fn();
    } catch (e: any) {
      last = e;
      if (i < tries) await sleep(expoBackoffDelay(i));
    }
  }
  throw last;
}

/* ===========================
   GENERATE STORY REPLY
   =========================== */
export async function generateSpicyReply(userText: string, history: Msg[]): Promise<string> {
  if (!OR_KEY) throw new Error("OPENROUTER_API_KEY is missing");

  const clipped = clipHistory(history);

  const directive: Msg = {
    role: "user",
    content:
      "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∞–ª—å—à–µ. –ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ—à–ª–æ–µ, –∞ —Ä–∞–∑–≤–∏–≤–∞–π —Å—é–∂–µ—Ç –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. " +
      "–ü–∏—à–∏ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∂–µ—Å—Ç—ã. " +
      "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏–ª–∏ –∏–Ω—Ç–∏–º–Ω—É—é —Å—Ü–µ–Ω—É ‚Äî " +
      "–ø–µ—Ä–µ–¥–∞–π –µ—ë —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ, –∫—Ä–∞—Å–∏–≤–æ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —ç–º–æ—Ü–∏–∏, –¥—ã—Ö–∞–Ω–∏–µ –∏ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è. " +
      "–ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º 1‚Äì2 –∞–±–∑–∞—Ü–∞.",
  };

  const messages: Msg[] = [
    { role: "system", content: SYSTEM_PROMPT },
    ...clipped,
    directive,
    { role: "user", content: userText.slice(0, 4000) },
  ];

  const gen = {
  temperature: 0.9,
  top_p: 0.92,
  max_tokens: 2800, // üöÄ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã, –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
  frequency_penalty: 0.3,
  presence_penalty: 0.2,
};


  const models = [
    "sao10k/l3-stheno-8b",
    "mawdstical/squelching-fantasies-8b",
    "sao10k/l3-lunaris-8b",
    "qwen2.5-14b-instruct",
    "gpt-4o-mini",
  ];

  let lastErr: any;
  for (const model of models) {
    try {
      console.log(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: ${model}`);
      const reply = await withRetries(() => callOpenRouterOnce(model, messages, gen));
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${model}`);
      return limitParagraphs(reply, 2);
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, (e as Error).message);
      lastErr = e;
      continue;
    }
  }

  throw lastErr;
}

/* ===========================
   GOOGLE TRANSLATOR (clean)
   =========================== */
/**
 * –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ Google Translate.
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π, –∫–∞–∫ –≤ Chrome/Comet.
 * –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenRouter.
 */
export async function translateToRussian(text: string): Promise<string> {
  if (!text || text.trim().length === 0) return text;

  try {
    const res = await translate(text, { to: "ru" });
    if (res.text && res.text.trim().length > 0) return res.text.trim();
    console.warn("‚ö†Ô∏è Google Translate –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª");
    return text;
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Google Translate:", e);
    return text;
  }
}

/* ===========================
   SUMMARIZER
   =========================== */
export async function summarizeHistory(history: Msg[]): Promise<string> {
  const messages: Msg[] = [
    {
      role: "system",
      content:
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), " +
        "—Å–æ—Ö—Ä–∞–Ω–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –º–µ—Å—Ç–æ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
    },
    { role: "user", content: history.map((m) => m.content).join("\n") },
  ];

  const gen = { temperature: 0.3, top_p: 0.8, max_tokens: 300 };

  try {
    return await callOpenRouterOnce("gpt-4o-mini", messages, gen);
  } catch {
    return "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
  }
}
