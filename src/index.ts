// src/index.ts
import "dotenv/config";
import { Bot, InlineKeyboard } from "grammy";
import {
  upsertUser,
  addMessage,
  getHistory,
  resetUser,
  isPremium,
  getMessageCount,
  getAgeVerified,
  updateCharacterField,
  getCharacterProfile,
} from "./db";

import type { Msg } from "./llm";
import type { CharacterProfile } from "./db";
import { generateSpicyReply, translateToRussian, summarizeHistory } from "./llm";

const token = process.env.BOT_TOKEN!;
if (!token) {
  throw new Error("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env");
}

const bot = new Bot(token);

const PAYWALL_LIMIT = 100;
const SUMMARY_EVERY = 20;

/* ===========================
   HELPERS
   =========================== */
function actionKeyboard() {
  return new InlineKeyboard()
    .text("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "continue")
    .row()
    .text("üåç –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∏—Ä", "new_world")
    .row()
    .text("üß† –ó–∞–±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "forget_last");
}

function ageKeyboard() {
  return new InlineKeyboard()
    .text("‚úÖ –ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç", "age_yes")
    .row()
    .text("‚ùå –ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç", "age_no");
}

/* ===========================
   CHARACTER CREATION
   =========================== */
const creationSteps = [
  { key: "character_name", question: "üßô –ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?" },
  { key: "character_gender", question: "‚öß –£–∫–∞–∂–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–º/–∂/–¥—Ä—É–≥–æ–µ):" },
  { key: "character_age", question: "üéÇ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç–≤–æ–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É?" },
  { key: "character_hair", question: "üíá –û–ø–∏—à–∏ —Ü–≤–µ—Ç –∏ –¥–ª–∏–Ω—É –≤–æ–ª–æ—Å:" },
  { key: "character_traits", question: "‚ú® –û–ø–∏—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:" },
  { key: "character_preference", question: "üíû –ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂? (–º—É–∂—á–∏–Ω–∞–º, –∂–µ–Ω—â–∏–Ω–∞–º, –æ–±–æ–∏–º, –Ω–∏–∫–æ–º—É)" },
] as const;

const userState = new Map<number, number>();

const WELCOME_TEXT = `
üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Your World Simulator*.

–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω, –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ:  
‚Ä¢ –û–ø–∏—à–∏, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è.  
‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∫—Ä—É–≥?  
‚Ä¢ –° –∫–µ–º —Ç—ã?  
–Ø –ø—Ä–æ–¥–æ–ª–∂—É –∏—Å—Ç–æ—Ä–∏—é –æ—Ç –ª–∏—Ü–∞ –º–∏—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
(–ö–æ–≥–¥–∞ —Ç–∞–ø–∞–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äú–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚Äù ‚Äî –ø–æ–¥–æ–∂–¥–∏ 2‚Äì4 —Å–µ–∫—É–Ω–¥—ã, –ø–æ–∫–∞ —è –ø–∏—à—É üòâ)
`;

/* ===========================
   START
   =========================== */
bot.command("start", async (ctx) => {
  if (!ctx.from) return;
  const userId = ctx.from.id;
  await upsertUser(userId, ctx.from.username, ctx.from.first_name, ctx.from.last_name);

  const ageStatus = await getAgeVerified(userId);
  if (ageStatus === -1) return ctx.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 18+.");
  if (ageStatus === 0) return ctx.reply("‚ö†Ô∏è –¢–µ–±–µ —É–∂–µ –µ—Å—Ç—å 18 –ª–µ—Ç?", { reply_markup: ageKeyboard() });

  const char = (await getCharacterProfile(userId)) as CharacterProfile | null;
  if (!char || !char.character_name) {
    userState.set(userId, 0);
    return ctx.reply("üé≠ –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n" + creationSteps[0].question);
  }

  return ctx.reply(WELCOME_TEXT, { reply_markup: actionKeyboard() });
});

/* ===========================
   CHARACTER CREATION FLOW
   =========================== */
bot.on("message:text", async (ctx) => {
  if (!ctx.from) return;
  const chatId = ctx.from.id;
  const text = ctx.message.text.trim();

  // === –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞—ë—Ç—Å—è ===
  if (userState.has(chatId)) {
    const step = userState.get(chatId)!;
    const current = creationSteps[step];
    await updateCharacterField(chatId, current.key, text);

    if (step + 1 < creationSteps.length) {
      userState.set(chatId, step + 1);
      return ctx.reply(creationSteps[step + 1].question);
    }

    userState.delete(chatId);
    const profile = (await getCharacterProfile(chatId)) as CharacterProfile | null;
    if (!profile) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.");

    await ctx.reply(
      `‚ú® –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\n` +
        `–ò–º—è: *${profile?.character_name || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n` +
        `–ü–æ–ª: *${profile?.character_gender || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n` +
        `–í–æ–∑—Ä–∞—Å—Ç: *${profile?.character_age || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n` +
        `–í–æ–ª–æ—Å—ã: *${profile?.character_hair || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n` +
        `–•–∞—Ä–∞–∫—Ç–µ—Ä: *${profile?.character_traits || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n` +
        `–ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç: *${profile?.character_preference || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*`,
      { parse_mode: "Markdown" }
    );
    return ctx.reply(WELCOME_TEXT, { reply_markup: actionKeyboard() });
  }

  // === –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ ===
  const count = await getMessageCount(chatId);
  if (!(await isPremium(chatId)) && count >= PAYWALL_LIMIT)
    return ctx.reply(
      "‚ö†Ô∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø.",
      { reply_markup: new InlineKeyboard().text("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "buy_premium") }
    );

  await ctx.api.sendChatAction(ctx.chat.id, "typing");
  await addMessage(chatId, "user", text, text);

  let hist = await getHistory(chatId);

  // üß† –°–∂–∏–º–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
  if (hist.length > 12) {
    const oldPart = hist.slice(0, -8);
    const summary = await summarizeHistory(oldPart);
    hist = [{ role: "system", content: `[SUMMARY]: ${summary}` }, ...hist.slice(-8)];
  }

  const replyOriginal = await generateSpicyReply(text, hist, ctx.from.id);
  const replyTranslated = /[a-zA-Z]{4,}/.test(replyOriginal)
    ? await translateToRussian(replyOriginal)
    : replyOriginal;

  await addMessage(chatId, "assistant", replyOriginal, replyTranslated);
  await ctx.reply(replyTranslated, { reply_markup: actionKeyboard() });
});

/* ===========================
   CALLBACKS
   =========================== */
bot.callbackQuery("continue", async (ctx) => {
  const chatId = ctx.from!.id;
  let hist = await getHistory(chatId);

  // üßπ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–¥—Ä—è–¥
  hist = hist.filter((m, i, arr) => i === 0 || m.content !== arr[i - 1].content);

  // üß† –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–ª–∏–Ω–Ω–∞—è ‚Äî —Å–∂–∏–º–∞–µ–º
  if (hist.length > 12) {
    const oldPart = hist.slice(0, -8);
    const summary = await summarizeHistory(oldPart);
    hist = [{ role: "system", content: `[SUMMARY]: ${summary}` }, ...hist.slice(-8)];
  }

  await ctx.api.sendChatAction(chatId, "typing");

  hist.push({
    role: "user",
    content: "[–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ü–µ–Ω—É]",
  });

  const replyOriginal = await generateSpicyReply("[–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ü–µ–Ω—É]", hist, chatId);
  const replyTranslated = /[a-zA-Z]{4,}/.test(replyOriginal)
    ? await translateToRussian(replyOriginal)
    : replyOriginal;

  // üîÅ –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
  const last = hist[hist.length - 1]?.content;
  if (last !== replyTranslated) {
    await addMessage(chatId, "assistant", replyOriginal, replyTranslated);
  }

  await ctx.reply(replyTranslated, { reply_markup: actionKeyboard() });
});

bot.callbackQuery("new_world", async (ctx) => {
  if (!ctx.from) return;
  await resetUser(ctx.from.id);
  userState.set(ctx.from.id, 0);
  await ctx.reply("üÜï –ú–∏—Ä –æ—á–∏—â–µ–Ω!\nüé≠ –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n" + creationSteps[0].question);
});

bot.callbackQuery("forget_last", async (ctx) => {
  await resetUser(ctx.from!.id);
  await ctx.reply("üß† –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±—ã—Ç–æ.", { reply_markup: actionKeyboard() });
});

/* ===========================
   RUN
   =========================== */
(async () => {
  console.log("üöÄ Bot running with anti-loop, compression & orientation support");
  await bot.api.deleteWebhook({ drop_pending_updates: true }).catch(() => {});
  await bot.start();
})();
