// src/index.ts
import "dotenv/config";
import path from "path";
import { Bot, InlineKeyboard } from "grammy";
import paymentRouter from "./paymentCrypto";
import Database from "better-sqlite3";
import express, { Request, Response } from "express";

import {
  upsertUser,
  addMessage,
  getHistory,
  resetUser,
  isPremium,
  getMessageCount,
  getAgeVerified,
  updateCharacterField,
  getCharacterProfile,
} from "./db";
import type { CharacterProfile } from "./db";
import { generateSpicyReply, translateToRussian, summarizeHistory } from "./llm";

/* ===========================
   EXPRESS SERVER
   =========================== */
const app = express();

// ‚úÖ –†–∞–∑–¥–∞—ë–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ public –≤–Ω—É—Ç—Ä–∏ src)
app.use(express.static(path.join(process.cwd(), "src/public")));

// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–µ–ø–µ—Ä—å –∑–∞–≥–ª—É—à–∫–∞)
app.use("/", paymentRouter);

app.get("/", (req: Request, res: Response) => {
  res.send("üåê YourWorldSimulator –æ–Ω–ª–∞–π–Ω. Webhook –∞–∫—Ç–∏–≤–µ–Ω.");
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () =>
  console.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
);

/* ===========================
   TELEGRAM BOT INIT
   =========================== */
const token = process.env.BOT_TOKEN!;
if (!token) throw new Error("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env");

const bot = new Bot(token);
const ADMIN_GROUP_ID = -1003218588633;
const PAYWALL_LIMIT = 10;
const db = new Database("data.db");

/* ===========================
   ADMIN COMMANDS
   =========================== */
bot.command("resetpremium", async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  const ADMIN_ID = 448157054;
  if (userId !== ADMIN_ID) return ctx.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.");

  const user = db.prepare("SELECT premium FROM users WHERE id = ?").get(userId);
  const currentStatus = user?.premium === 1;
  const newStatus = currentStatus ? 0 : 1;

  db.prepare("UPDATE users SET premium = ? WHERE id = ?").run(newStatus, userId);

  ctx.reply(newStatus ? "üíé Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é." : "üö´ Premium –æ—Ç–∫–ª—é—á—ë–Ω –≤—Ä—É—á–Ω—É—é.");
  console.log(`üîÅ Premium –¥–ª—è ${userId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${newStatus}`);
});

bot.command("whoami", async (ctx) => {
  const user = ctx.from;
  if (!user) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  await ctx.reply(
    `üë§ –¢–≤–æ–π Telegram ID: *${user.id}*\n–ò–º—è: *${user.first_name || "-"}*\n–Æ–∑–µ—Ä–Ω–µ–π–º: *@${user.username || "–Ω–µ—Ç"}*`,
    { parse_mode: "Markdown" }
  );
});

bot.command("setpremium", async (ctx) => {
  const adminId = ctx.from?.id;
  const ADMIN_ID = 448157054;
  if (adminId !== ADMIN_ID) return ctx.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.");

  const args = ctx.message?.text?.split(" ").filter(Boolean);
  if (!args || args.length < 3)
    return ctx.reply("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setpremium <user_id> <on|off>");

  const targetId = Number(args[1]);
  const action = args[2].toLowerCase();
  if (isNaN(targetId)) return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  const newStatus = action === "on" ? 1 : 0;
  const userExists = db.prepare("SELECT id FROM users WHERE id = ?").get(targetId);
  if (!userExists) return ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.");

  db.prepare("UPDATE users SET premium = ? WHERE id = ?").run(newStatus, targetId);
  ctx.reply(newStatus ? `üíé Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${targetId}.` : `üö´ Premium –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è ${targetId}.`);
  console.log(`üîß Premium –¥–ª—è ${targetId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${newStatus}`);
});

bot.command("privacy", async (ctx) => {
  await ctx.reply("üõ° –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: https://yourworldsimulator.onrender.com/privacy.html");
});

bot.command("terms", async (ctx) => {
  await ctx.reply("üìú –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: https://yourworldsimulator.onrender.com/terms.html");
});

/* ===========================
   HELPERS
   =========================== */
function actionKeyboard() {
  return new InlineKeyboard()
    .text("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "continue")
    .row()
    .text("üåç –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∏—Ä", "new_world")
    .row()
    .text("üß† –ó–∞–±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "forget_last");
}

function ageKeyboard() {
  return new InlineKeyboard()
    .text("‚úÖ –ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç", "age_yes")
    .row()
    .text("‚ùå –ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç", "age_no");
}

/* ===========================
   CHARACTER CREATION
   =========================== */
const creationSteps = [
  { key: "character_name", question: "üßô –ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?" },
  { key: "character_gender", question: "‚öß –£–∫–∞–∂–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–º/–∂/–¥—Ä—É–≥–æ–µ):" },
  { key: "character_age", question: "üéÇ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç–≤–æ–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É?" },
  { key: "character_race", question: "üß¨ –ö –∫–∞–∫–æ–π —Ä–∞—Å–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂?" },
  { key: "character_preference", question: "üíû –ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂? (–º—É–∂—á–∏–Ω–∞–º, –∂–µ–Ω—â–∏–Ω–∞–º, –æ–±–æ–∏–º, –Ω–∏–∫–æ–º—É)" },
] as const;

const userState = new Map<number, number>();

const WELCOME_TEXT = `
üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Your World Simulator*.

–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω, –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ:  
‚Ä¢ –û–ø–∏—à–∏, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è.  
‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∫—Ä—É–≥?  
‚Ä¢ –° –∫–µ–º —Ç—ã?  
–Ø –ø—Ä–æ–¥–æ–ª–∂—É –∏—Å—Ç–æ—Ä–∏—é –æ—Ç –ª–∏—Ü–∞ –º–∏—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω—è—Ç—å –∏ —Å–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å—é–∂–µ—Ç).

*–í–∞–∂–Ω–æ:* –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 18+.  
(–ö–æ–≥–¥–∞ —Ç–∞–ø–∞–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äú–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚Äù ‚Äî –ø–æ–¥–æ–∂–¥–∏ 2‚Äì4 —Å–µ–∫—É–Ω–¥—ã üòâ)
`;

/* ===========================
   START COMMAND
   =========================== */
bot.command("start", async (ctx) => {
  if (!ctx.from) return;
  const userId = ctx.from.id;

  const existingUser = db.prepare("SELECT id FROM users WHERE id = ?").get(userId);
  if (!existingUser) {
    console.log("üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", ctx.from);
    await bot.api.sendMessage(
      ADMIN_GROUP_ID,
      `üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!*\n–ò–º—è: *${ctx.from.first_name || "-"}*\nUsername: @${ctx.from.username || "–Ω–µ—Ç"}\nID: \`${userId}\``,
      { parse_mode: "Markdown" }
    );
  }

  await upsertUser(userId, ctx.from.username, ctx.from.first_name, ctx.from.last_name);

  const ageStatus = await getAgeVerified(userId);
  if (ageStatus === -1) return ctx.reply("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 18+.");
  if (ageStatus === 0)
    return ctx.reply("‚ö†Ô∏è –¢–µ–±–µ —É–∂–µ –µ—Å—Ç—å 18 –ª–µ—Ç?", { reply_markup: ageKeyboard() });

  const char = (await getCharacterProfile(userId)) as CharacterProfile | null;
  if (!char || !char.character_name) {
    userState.set(userId, 0);
    return ctx.reply("üé≠ –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n" + creationSteps[0].question);
  }

  await ctx.reply(WELCOME_TEXT);
  setTimeout(() => {
    ctx.reply("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ üëá", { reply_markup: actionKeyboard() });
  }, 2000);
});

/* ===========================
   GAME LOGIC
   =========================== */
bot.on("message:text", async (ctx, next) => {
  if (ctx.message.text.startsWith("/")) return;
  await next();
});

// üí¨ –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
bot.on("message:text", async (ctx) => {
  if (!ctx.from) return;
  const chatId = ctx.from.id;
  const text = ctx.message.text.trim();

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  if (userState.has(chatId)) {
    const step = userState.get(chatId)!;
    const current = creationSteps[step];
    await updateCharacterField(chatId, current.key, text);

    if (step + 1 < creationSteps.length) {
      userState.set(chatId, step + 1);
      return ctx.reply(creationSteps[step + 1].question);
    }

    userState.delete(chatId);
    const profile = (await getCharacterProfile(chatId)) as CharacterProfile | null;
    if (!profile) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.");

    await ctx.reply(
      `‚ú® –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\n–ò–º—è: *${profile.character_name || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n–ü–æ–ª: *${profile.character_gender || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n–í–æ–∑—Ä–∞—Å—Ç: *${profile.character_age || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n–†–∞—Å–∞: *${profile.character_race || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*\n–ö–æ–º—É —Å–∏–º–ø–∞—Ç–∏–∑–∏—Ä—É–µ—Ç: *${profile.character_preference || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}*`,
      { parse_mode: "Markdown" }
    );

    return ctx.reply(WELCOME_TEXT);
  }

  const count = await getMessageCount(chatId);

  if (count === 2 && !(await isPremium(chatId))) {
    const payKeyboard = new InlineKeyboard().url(
      "üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Patreon",
      "https://www.patreon.com/cw/YouWorldSimulator"
    );
    return ctx.reply(
      "‚ú® –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π?\nüíé –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞ Patreon –∏ –ø–æ–ª—É—á–∏ Premium-–¥–æ—Å—Ç—É–ø!",
      { reply_markup: payKeyboard, parse_mode: "Markdown" }
    );
  }

  if (!(await isPremium(chatId)) && count >= PAYWALL_LIMIT)
    return ctx.reply(
      "‚ö†Ô∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞ Patreon ‚ù§Ô∏è\n" +
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å *YourWorldSimulator* –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –º–∏—Ä—ã!",
      {
        reply_markup: new InlineKeyboard().url(
          "üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Patreon",
          "https://www.patreon.com/cw/YouWorldSimulator"
        ),
      }
    );

  await ctx.api.sendChatAction(ctx.chat.id, "typing");
  await addMessage(chatId, "user", text, text);

  let hist = await getHistory(chatId);
  if (hist.length > 12) {
    const oldPart = hist.slice(0, -8);
    const summary = await summarizeHistory(oldPart);
    hist = [{ role: "system", content: `[SUMMARY]: ${summary}` }, ...hist.slice(-8)];
  }

  const replyOriginal = await generateSpicyReply(text, hist, ctx.from.id);
  const replyTranslated = /[a-zA-Z]{4,}/.test(replyOriginal)
    ? await translateToRussian(replyOriginal)
    : replyOriginal;

  await addMessage(chatId, "assistant", replyOriginal, replyTranslated);
  await ctx.reply(replyTranslated, { reply_markup: actionKeyboard() });
});

/* ===========================
   RENDER START
   =========================== */
(async () => {
  console.log("üöÄ Bot running on Render (Background Worker mode)");

  try {
    await bot.api.setMyCommands([
      { command: "start", description: "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" },
      { command: "privacy", description: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏" },
      { command: "terms", description: "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" },
      { command: "resetpremium", description: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å Premium –≤—Ä—É—á–Ω—É—é" },
      { command: "whoami", description: "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID" },
    ]);

    if (process.env.NODE_ENV === "production") {
      await bot.api.deleteWebhook({ drop_pending_updates: true }).catch(() => {});
      await bot.start();
      console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render");
    } else {
      console.log("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî —É–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –Ω–∞ Render –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
      await bot.start();
      console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ");
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err);
  }
})();
